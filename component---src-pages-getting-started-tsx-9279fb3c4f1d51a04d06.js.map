{"version":3,"sources":["webpack:///./src/pages/getting-started.tsx"],"names":["GettingStartedPage","css","title","Title","Contents","Subtitle"],"mappings":"+OAwFeA,UApFY,WACzB,OACE,YAAC,IAAD,KACE,mBAAKC,IAAG,GACN,YAAC,IAAD,CAAaC,MAAO,YAAC,IAAYC,MAAb,sBAClB,YAAC,IAAYC,SAAb,yGAIA,4HAMF,YAAC,IAAD,CAAaF,MAAO,YAAC,IAAYC,MAAb,eAClB,YAAC,IAAYC,SAAb,sGAIA,iRAWF,YAAC,IAAD,CAAaF,MAAO,YAAC,IAAYC,MAAb,0BAClB,YAAC,IAAYC,SAAb,qGAGE,uBAHF,iGAOA,YAAC,IAAYC,SAAb,gBACA,yVAiBA,YAAC,IAAYA,SAAb,cACA","file":"component---src-pages-getting-started-tsx-9279fb3c4f1d51a04d06.js","sourcesContent":["import BasicLayout from 'components/BasicLayout';\nimport PostSection from 'components/PostSection';\nimport React from 'react';\n\nconst GettingStartedPage = () => {\n  return (\n    <BasicLayout>\n      <div css={{ paddingTop: 94, paddingLeft: 50, paddingRight: 30 }}>\n        <PostSection title={<PostSection.Title>Installation</PostSection.Title>}>\n          <PostSection.Contents>\n            Lubycon UI Kit은 아직 알파 버전만 배포된 상태입니다. 따라서 문서 상단의 버전을 확인하고\n            latest가 아닌 정확한 버전을 명시하여 설치하시는 것을 추천합니다.\n          </PostSection.Contents>\n          <pre>\n            {`$ npm install @lubycon/ui-kit@v1.1.0-alpha.24\n// or\n$ yarn add @lubycon/ui-kit@v1.1.0-alpha.24`}\n          </pre>\n        </PostSection>\n        <PostSection title={<PostSection.Title>Usage</PostSection.Title>}>\n          <PostSection.Contents>\n            Lubycon UI Kit 내부의 몇몇 컴포넌트는 컴포넌트 트리와 분리된 상태와 렌더 트리를 가지고\n            있기 때문에 LubyconUIKitProvider을 필요로 합니다.\n          </PostSection.Contents>\n          <pre>\n            {`// App.tsx\n\nimport React, { PropsWithChildren } from 'react';\nimport { LubyconUIKitProvider } from '@lubycon/ui-kit';\n\nfunction App({ children }: PropsWithChildren<{}>) {\n  return <LubyconUIKitProvider>{children}</LubyconUIKitProvider>;\n}`}\n          </pre>\n        </PostSection>\n        <PostSection title={<PostSection.Title>선언적 렌더링 vs Hooks</PostSection.Title>}>\n          <PostSection.Contents>\n            Lubycon UI Kit의 많은 컴포넌트들은 선언적 렌더링을 지원하지만, 간혹 선언적 렌더링만으로\n            처리하기에는 컴포넌트 렌더 트리가 장황하다고 느껴질 수도 있습니다.\n            <br />\n            그래서 이런 경우 컴포넌트 렌더 트리에 영향을 받지 않는 몇몇 컴포넌트들에 한해 사용자가\n            선언적인 방법과 명령적인 방법을 선택해서 사용할 수 있도록 지원하고 있습니다.\n          </PostSection.Contents>\n          <PostSection.Subtitle>선언적 렌더링</PostSection.Subtitle>\n          <pre>\n            {`import React, { useState } from 'react';\nimport { Toast } from '@lubycon/ui-kit';\n\nfunction Foo() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <>\n      <Button onClick={() => setShow(true)}>토스트 열기</Button>\n      <Toast show={show} message=\"토스트입니다\" />\n    </>\n  );\n}\n\nexport default Foo;`}\n          </pre>\n          <PostSection.Subtitle>Hooks</PostSection.Subtitle>\n          <pre>\n            {`import React from 'react';\nimport { useToast, Button } from '@lubycon/ui-kit';\n\nfunction Foo() {\n  const { openToast } = useToast();\n\n  return (\n    <Button onClick={() => {\n      openToast({\n        message: '토스트입니다',\n      });\n    }}>\n      토스트 열기\n    </Button>\n  );\n}\n\nexport default Foo;`}\n          </pre>\n        </PostSection>\n      </div>\n    </BasicLayout>\n  );\n};\n\nexport default GettingStartedPage;\n"],"sourceRoot":""}